import streamlit as st

st.title("아파트 가치 평가 프로그램")
st.write("앱이 정상적으로 실행됩니다!")
import streamlit as st
from logic.auto_analysis import analyze_input
from gpt.gpt_cache import gpt_브리핑_with_cache
from auth.user_loader import load_user_plan
from auth.plan_checker import check_gpt_access, increment_usage
from components.show_gpt_result import show_gpt_result

st.set_page_config(page_title="아파트 가치 평가", layout="wide")
st.title("아파트 가치 평가 프로그램")

# 이메일 입력
user_email = st.text_input("이메일을 입력하세요")
if not user_email:
    st.stop()

# 사용자 정보 로드 (users.csv 또는 Google Sheets 기반)
user_info = load_user_plan(user_email)
if not user_info:
    st.error("등록되지 않은 사용자입니다.")
    st.stop()

st.markdown(f"**현재 플랜:** {user_info['plan'].capitalize()}")

# 아파트 정보 입력
input_text = st.text_area("아파트 정보 입력", "예: 힐스테이트중앙아파트, 전용 84㎡, 매매가 8.2억")

if st.button("분석 시작"):
    analyzed = analyze_input(input_text)

    # 무료 버전(Lite 플랜)인 경우: 제한된 분석 결과 제공 + 업그레이드 유도
    if user_info['plan'] == "lite":
        st.subheader("기본 분석 결과 (요약)")
        st.write(analyzed)
        st.info("더 자세한 전문가 분석 결과를 보시려면 업그레이드가 필요합니다.")
        # 업그레이드 버튼: 실제 구독 페이지 링크나 안내 페이지 연결
        if st.button("Standard 플랜으로 업그레이드"):
            st.markdown("[여기를 클릭하여 업그레이드 페이지로 이동](https://your-subscription-page-link)")
        st.stop()

    # 유료 플랜(Standard, Pro)의 경우: GPT 브리핑 등 고급 기능 실행
    if not check_gpt_access(user_info):
        st.error("GPT 사용 횟수를 모두 소진했습니다.")
        st.stop()

    with st.spinner("GPT 브리핑 생성 중..."):
        gpt_result = gpt_브리핑_with_cache(analyzed, model=user_info['gpt_model'])
        show_gpt_result(gpt_result)
        increment_usage(user_email)

    # Pro 플랜만 PDF 저장 기능 제공
    if user_info['plan'] == "pro":
        st.download_button("PDF 저장하기", data="(PDF 생성 로직 연결 필요)", file_name="아파트_브리핑.pdf")
    elif user_info['plan'] == "standard":
        st.info("PDF 저장은 Pro 플랜에서 제공됩니다.")
